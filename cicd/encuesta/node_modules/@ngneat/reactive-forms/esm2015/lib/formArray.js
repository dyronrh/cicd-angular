import { FormArray as NgFormArray } from '@angular/forms';
import { isObservable, Subject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { controlDisabled$, controlDisabledWhile, controlEnabled$, controlEnabledWhile, controlErrorChanges$, controlStatusChanges$, controlValueChanges$, disableControl, enableControl, hasErrorAndDirty, hasErrorAndTouched, markAllDirty, mergeControlValidators } from './control-actions';
import { coerceArray, mergeErrors, removeError } from './utils';
export class FormArray extends NgFormArray {
    constructor(controls, validatorOrOpts, asyncValidator) {
        super(controls, validatorOrOpts, asyncValidator);
        this.controls = controls;
        this.touchChanges = new Subject();
        this.dirtyChanges = new Subject();
        this.errorsSubject = new Subject();
        this.touch$ = this.touchChanges.asObservable().pipe(distinctUntilChanged());
        this.dirty$ = this.dirtyChanges.asObservable().pipe(distinctUntilChanged());
        this.value$ = controlValueChanges$(this);
        this.disabled$ = controlDisabled$(this);
        this.enabled$ = controlEnabled$(this);
        this.status$ = controlStatusChanges$(this);
        this.errors$ = controlErrorChanges$(this, this.errorsSubject.asObservable());
    }
    get asyncValidator() {
        return super.asyncValidator;
    }
    set asyncValidator(asyncValidator) {
        super.asyncValidator = asyncValidator;
    }
    get validator() {
        return super.validator;
    }
    set validator(validator) {
        super.validator = validator;
    }
    select(mapFn) {
        return this.value$.pipe(map(mapFn), distinctUntilChanged());
    }
    getRawValue() {
        return super.getRawValue();
    }
    at(index) {
        return super.at(index);
    }
    setValue(valueOrObservable, options) {
        if (isObservable(valueOrObservable)) {
            return valueOrObservable.subscribe(value => super.setValue(value, options));
        }
        super.setValue(valueOrObservable, options);
    }
    patchValue(valueOrObservable, options) {
        if (isObservable(valueOrObservable)) {
            return valueOrObservable.subscribe((value) => super.patchValue(value, options));
        }
        super.patchValue(valueOrObservable, options);
    }
    push(control) {
        return super.push(control);
    }
    insert(index, control) {
        return super.insert(index, control);
    }
    setControl(index, control) {
        return super.setControl(index, control);
    }
    disabledWhile(observable, options) {
        return controlDisabledWhile(this, observable, options);
    }
    enabledWhile(observable, options) {
        return controlEnabledWhile(this, observable, options);
    }
    mergeValidators(validators) {
        mergeControlValidators(this, validators);
    }
    mergeAsyncValidators(validators) {
        this.setAsyncValidators([this.asyncValidator, ...coerceArray(validators)]);
        this.updateValueAndValidity();
    }
    markAsTouched(opts) {
        super.markAsTouched(opts);
        this.touchChanges.next(true);
    }
    markAsUntouched(opts) {
        super.markAsUntouched(opts);
        this.touchChanges.next(false);
    }
    markAsPristine(opts) {
        super.markAsPristine(opts);
        this.dirtyChanges.next(false);
    }
    markAsDirty(opts) {
        super.markAsDirty(opts);
        this.dirtyChanges.next(true);
    }
    markAllAsDirty() {
        markAllDirty(this);
    }
    reset(value, options) {
        super.reset(value, options);
    }
    setValidators(newValidator) {
        super.setValidators(newValidator);
        super.updateValueAndValidity();
    }
    setAsyncValidators(newValidator) {
        super.setAsyncValidators(newValidator);
        super.updateValueAndValidity();
    }
    validateOn(observableValidation) {
        return observableValidation.subscribe(maybeError => {
            this.setErrors(maybeError);
        });
    }
    hasError(errorCode, path) {
        return super.hasError(errorCode, path);
    }
    setErrors(errors, opts = {}) {
        this.errorsSubject.next(errors);
        return super.setErrors(errors, opts);
    }
    mergeErrors(errors, opts = {}) {
        this.setErrors(mergeErrors(this.errors, errors), opts);
    }
    removeError(key, opts = {}) {
        this.setErrors(removeError(this.errors, key), opts);
    }
    getError(errorCode, path) {
        return super.getError(errorCode, path);
    }
    hasErrorAndTouched(errorCode, path) {
        return hasErrorAndTouched(this, errorCode, path);
    }
    hasErrorAndDirty(errorCode, path) {
        return hasErrorAndDirty(this, errorCode, path);
    }
    setEnable(enable = true, opts) {
        enableControl(this, enable, opts);
    }
    setDisable(disable = true, opts) {
        disableControl(this, disable, opts);
    }
    remove(value) {
        this.removeWhen(v => v.value === value);
    }
    removeWhen(predicate) {
        const toRemove = [];
        for (let i = this.length - 1; i >= 0; --i) {
            if (predicate(this.at(i))) {
                this.removeAt(i);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,